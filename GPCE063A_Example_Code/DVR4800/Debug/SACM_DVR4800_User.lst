Generalplus u'nSP Assembler - Ver. 1.14.13.0
              Listing File Has Been Relocated
                            	//==========================================================================
                            	// File Name   : SACM_DVR4800_USER.asm
                            	// Description : Users implement functions
                            	// Written by  : Ray Cheng
                            	// Last modified date:
                            	//              2005/12/26
                            	// Note: 
                            	//==========================================================================
                            	//**************************************************************************
                            	// Header File Included Area
                            	//**************************************************************************
                            	.include GPCE063.inc
                     <      	//==========================================================================
                     <      	// File Name   : GPCE063.inc
                     <      	// Description : GPCE063 registers and constants definition
                     <      	// Written by  : Chimc
                     <      	// Last modified date:
                     <      	//              2008/03/19
                     <      	//==========================================================================
                     <      	.ifndef __GPCE063_INC__
                     <      	.define __GPCE063_INC__
                     <      	
                     <      	//--------------------------------------------------------------------------------------------------------------------------------------------
                     <      	//	GPIO Configration
                     <      	//	Dir		Att		Dat		Function Description			Wakeup
                     <      	//	0		0		0		Input Pull Low					Yes
                     <      	//	0		0		1		Input Pull High					Yes
                     <      	//	0		1		0		Input Floating					Yes
                     <      	//	0		1		1		Input Floating					Yes
                     <      	//	1		0		0		Output High (Inverted)			Yes		(With Io Toggle Capability)
                     <      	//	1		0		1		Output Low (Inverted)			Yes		(With Io Toggle Capability)
                     <      	//	1		1		0		Output Low						Yes
                     <      	//	1		1		1		Output High						Yes
                     <      	//--------------------------------------------------------------------------------------------------------------------------------------------
                     <      	
                     <      	//--------------------------------------------------------------------------------------------------------------------------------------------
                     <      	//	Special IO Function
                     <      	//	IOA_Func	Bit15	Bit14	Bit13	Bit12	Bit11	Bit10	Bit9	Bit8	Bit7	Bit6	Bit5	Bit4	Bit3	Bit2	Bit1	Bit0
                     <      	//	IR			-		-		-		-		-		-		-		-		-		-		-		-		-		-		IROUT	-
                     <      	//	Wakeup		Yes		Yes		Yes		Yes		Yes		Yes		Yes		Yes		Yes		Yes		Yes		Yes		Yes		Yes		Yes		Yes
                     <      	//	FB/OSC		-		-		-		-		FO2		FI2		FO1		FI1		-		-		-		-		-		-		-		-
                     <      	//	Ext_Int		-		-		-		-		-		EXT2	-		EXT1	-		-		-		-		-		-		-		-
                     <      	//	IOPWM		-		-		-		-		-		-		-		-		-		-		-		-		-		-		-		IOPWM
                     <      	//	SPI			SPIRX	SPITX	SPICK	SPICS	-		-		-		-		-		-		-		-		-		-		-		-
                     <      	//	HighDriving	-		-		-		-		-		-		-		-		Yes		Yes		Yes		Yes		-		-		-		-
                     <      	//--------------------------------------------------------------------------------------------------------------------------------------------
                     <      	//	IOB_Func	Bit15	Bit14	Bit13	Bit12	Bit11	Bit10	Bit9	Bit8	Bit7	Bit6	Bit5	Bit4	Bit3	Bit2	Bit1	Bit0
                     <      	//	ADC_CH		-		-		-		-		-		-		-		-		AN7		AN6		AN5		AN4		AN3		AN2		AN1		AN0
                     <      	//--------------------------------------------------------------------------------------------------------------------------------------------
                     <      	
                     <      	//////////////////////////////////////////////////////////////////////////////////////
                     <      	//====================================================================================
                     <      	//	Port Definition
                     <      	//====================================================================================
                     <      	//////////////////////////////////////////////////////////////////////////////////////
                     <      	.define	P_IOA_Data				0x2000
                     <      	.define P_IOA_Buffer			0x2001
                     <      	.define	P_IOA_Dir				0x2002
                     <      	.define	P_IOA_Attrib			0x2003
                     <      	.define	P_IOB_Data				0x2004
                     <      	.define P_IOB_Buffer			0x2005
                     <      	.define	P_IOB_Dir				0x2006
                     <      	.define	P_IOB_Attrib			0x2007
                     <      	.define P_IO_Ctrl				0x2008
                     <      	
                     <      	//---------------------------------------------------
                     <      	.define P_TimerA_Data			0x2010
                     <      	.define P_TimerA_CNTR			0x2011
                     <      	.define P_TimerB_Data			0x2012
                     <      	.define P_TimerB_CNTR			0x2013
                     <      	.define P_TimerC_Data			0x2014
                     <      	.define P_TimerC_CNTR			0x2015
                     <      	.define P_Timer_Ctrl			0x2016
                     <      	
                     <      	//---------------------------------------------------
                     <      	.define P_PWM_Ctrl				0x2020
                     <      	
                     <      	//---------------------------------------------------
                     <      	.define P_System_Clock			0x2030
                     <      	.define P_System_Reset			0x2031
                     <      	.define P_Reset_LVD_Ctrl		0x2032
                     <      	.define P_TimeBase_Clear		0x2033
                     <      	.define P_Watchdog_Clear		0x2034
                     <      	.define P_Wait_Ctrl				0x2035
                     <      	.define P_System_Sleep			0x2036
                     <      	
                     <      	//---------------------------------------------------
                     <      	.define P_DAC_Ctrl				0x2040
                     <      	.define P_DAC_Data				0x2041
                     <      	
                     <      	//---------------------------------------------------
                     <      	.define P_INT_Ctrl				0x2050
                     <      	.define P_INT_Status			0x2051
                     <      	.define P_FIQ_Sel				0x2052
                     <      	
                     <      	//---------------------------------------------------
                     <      	.define P_SPI_Ctrl				0x2060
                     <      	.define P_SPI_TX_Status			0x2061
                     <      	.define P_SPI_TX_Data			0x2062
                     <      	.define P_SPI_RX_Status			0x2063
                     <      	.define P_SPI_RX_Data			0x2064
                     <      	.define P_SPI_Misc				0x2065
                     <      	
                     <      	//---------------------------------------------------
                     <      	.define P_ADC_Ctrl				0x2070
                     <      	.define P_ADC_Data				0x2071
                     <      	.define P_ADC_LineIn_BitCtrl	0x2072
                     <      	
                     <      	//---------------------------------------------------
                     <      	.define	P_Flash_Ctrl			0x26FF
                     <      	
                     <      	//---------------------------------------------------
                     <      	//---------------------------------------------------
                     <      	//---------------------------------------------------
                     <      	
                     <      	
                     <      	//////////////////////////////////////////////////////////////////////////////////////
                     <      	//====================================================================================
                     <      	// Constant Definition
                     <      	//====================================================================================
                     <      	//////////////////////////////////////////////////////////////////////////////////////
                     <      	
                     <      	//====================================================================================
                     <      	// P_IO_Ctrl (0x2008)
                     <      	//====================================================================================
                     <      	// Bit[15:11] : Reserved
                     <      	// Bit10 : FW_SPI_CS
                     <      	.define C_FW_SPI_CS				0x0400
                     <      	.define	C_SPI_CS_Firmware		0x0000		// CS Control by Firmware
                     <      	.define	C_SPI_CS_Hardware		0x0400		// CS Control by Hardware
                     <      	// Bit[9:8] : IR_Duty === IRout:IOA1
                     <      	.define	C_IR_Duty				0x0300
                     <      	.define	C_IR_Duty_DIV_2			0x0000		// 1/2 Duty
                     <      	.define	C_IR_Duty_DIV_3			0x0100		// 1/3 Duty
                     <      	.define	C_IR_Duty_DIV_4			0x0200		// 1/4 Duty
                     <      	.define	C_IR_Duty_DIV_5			0x0300		// 1/5 Duty
                     <      	// Bit[7:6] : IR_Ctrl
                     <      	.define	C_IR_Ctrl				0x00C0
                     <      	.define	C_IR_Disable			0x0000		// IR Disable ; IOA1 as Normal IO
                     <      	.define	C_IR_With_TimerA		0x0040		// IR Function Enable with Timer A as Source
                     <      	.define	C_IR_With_TimerB		0x0080		// IR Function Enable with Timer B as Source
                     <      	.define	C_IR_With_TimerC		0x00C0		// IR Function Enable with Timer C as Source
                     <      	// Bit[5:4] : EXT2_Ctrl === FI2:IOA10  FO2:IOA11
                     <      	.define	C_EXT2_Ctrl				0x0030
                     <      	.define	C_EXT2_Normal_Rising	0x0000		// Normal IO With Rising Edge Trigger
                     <      	.define	C_EXT2_Normal_Falling	0x0010		// Normal IO With Falling Edge Trigger
                     <      	.define	C_EXT2_Feedback_Rising	0x0020		// Feedback Oscillator With Rising Edge Trigger
                     <      	.define	C_EXT2_Feedback_Falling	0x0030		// Feedback Oscillator With Falling Edge Trigger
                     <      	// Bit[3:2] : EXT1_Ctrl === FI1:IOA8  FO1:IOA9
                     <      	.define	C_EXT1_Ctrl				0x000C
                     <      	.define	C_EXT1_Normal_Rising	0x0000		// Normal IO With Rising Edge Trigger
                     <      	.define	C_EXT1_Normal_Falling	0x0004		// Normal IO With Falling Edge Trigger
                     <      	.define	C_EXT1_Feedback_Rising	0x0008		// Feedback Oscillator With Rising Edge Trigger
                     <      	.define	C_EXT1_Feedback_Falling	0x000C		// Feedback Oscillator With Falling Edge Trigger
                     <      	// Bit[1:0] : Reserved 
                     <      	
                     <      	//====================================================================================
                     <      	// P_Timer_Ctrl (0x2016)  Timer Setting
                     <      	//====================================================================================
                     <      	// Bit[3:0] : TMASEL
                     <      	.define C_TimerA_Sel			0x000F
                     <      	.define C_TimerA_Disable		0x0000
                     <      	.define C_TimerA_Software_Count	0x0001
                     <      	.define C_TimerA_FRTC_EXT2		0x0002
                     <      	.define C_TimerA_EXT1_EXT2		0x0002
                     <      	.define C_TimerA_FPLL_EXT2		0x0003
                     <      	.define C_TimerA_EXT2_64Hz		0x0004
                     <      	.define C_TimerA_EXT2_16Hz		0x0005
                     <      	.define C_TimerA_EXT2_2Hz		0x0006
                     <      	.define C_TimerA_EXT2			0x0007
                     <      	.define C_TimerA_FRTC_64Hz		0x0008
                     <      	//.define C_TimerA_EXT1_64Hz	0x0008
                     <      	.define C_TimerA_FRTC_16Hz		0x0009
                     <      	//.define C_TimerA_EXT1_16Hz	0x0009
                     <      	.define C_TimerA_FRTC_2Hz		0x000A
                     <      	//.define C_TimerA_EXT1_2Hz		0x000A
                     <      	.define C_TimerA_FRTC			0x000B
                     <      	//.define C_TimerA_EXT1			0x000B
                     <      	.define C_TimerA_FPLL_64Hz		0x000C
                     <      	.define C_TimerA_FPLL_16Hz		0x000D
                     <      	.define C_TimerA_FPLL_2Hz		0x000E
                     <      	.define C_TimerA_FPLL			0x000F
                     <      	// Bit[7:4] : TMBSEL
                     <      	.define C_TimerB_Sel			0x00F0
                     <      	.define C_TimerB_Disable		0x0000
                     <      	.define C_TimerB_Software_Count	0x0010
                     <      	.define C_TimerB_FRTC_EXT2		0x0020
                     <      	.define C_TimerB_EXT1_EXT2		0x0020
                     <      	.define C_TimerB_FPLL_EXT2		0x0030
                     <      	.define C_TimerB_EXT2_64Hz		0x0040
                     <      	.define C_TimerB_EXT2_16Hz		0x0050
                     <      	.define C_TimerB_EXT2_2Hz		0x0060
                     <      	.define C_TimerB_EXT2			0x0070
                     <      	.define C_TimerB_FRTC_64Hz		0x0080
                     <      	//.define C_TimerB_EXT1_64Hz	0x0080
                     <      	.define C_TimerB_FRTC_16Hz		0x0090
                     <      	//.define C_TimerB_EXT1_16Hz	0x0090
                     <      	.define C_TimerB_FRTC_2Hz		0x00A0
                     <      	//.define C_TimerB_EXT1_2Hz		0x00A0
                     <      	.define C_TimerB_FRTC			0x00B0
                     <      	//.define C_TimerB_EXT1			0x00B0
                     <      	.define C_TimerB_FPLL_64Hz		0x00C0
                     <      	.define C_TimerB_FPLL_16Hz		0x00D0
                     <      	.define C_TimerB_FPLL_2Hz		0x00E0
                     <      	.define C_TimerB_FPLL			0x00F0
                     <      	// Bit[11:8] : TMCSEL
                     <      	.define C_TimerC_Sel			0x0F00
                     <      	.define C_TimerC_Disable		0x0000
                     <      	.define C_TimerC_Software_Count	0x0100
                     <      	.define C_TimerC_FRTC_EXT2		0x0200
                     <      	.define C_TimerC_EXT1_EXT2		0x0200
                     <      	.define C_TimerC_FPLL_EXT2		0x0300
                     <      	.define C_TimerC_EXT2_64Hz		0x0400
                     <      	.define C_TimerC_EXT2_16Hz		0x0500
                     <      	.define C_TimerC_EXT2_2Hz		0x0600
                     <      	.define C_TimerC_EXT2			0x0700
                     <      	.define C_TimerC_FRTC_64Hz		0x0800
                     <      	//.define C_TimerC_EXT1_64Hz	0x0800
                     <      	.define C_TimerC_FRTC_16Hz		0x0900
                     <      	//.define C_TimerC_EXT1_16Hz	0x0900
                     <      	.define C_TimerC_FRTC_2Hz		0x0A00
                     <      	//.define C_TimerC_EXT1_2Hz		0x0A00
                     <      	.define C_TimerC_FRTC			0x0B00
                     <      	//.define C_TimerC_EXT1			0x0B00
                     <      	.define C_TimerC_FPLL_64Hz		0x0C00
                     <      	.define C_TimerC_FPLL_16Hz		0x0D00
                     <      	.define C_TimerC_FPLL_2Hz		0x0E00
                     <      	.define C_TimerC_FPLL			0x0F00
                     <      	// Bit12 : Timer A input source select; 0 for FRTC, 1 for EXT1
                     <      	//.define C_TimerA_Input1			0x1000
                     <      	//.define C_TimerA_Input1_FRTC	0x0000
                     <      	//.define C_TimerA_Input1_EXT1	0x1000
                     <      	// Bit13 : Timer B input source select; 0 for FRTC, 1 for EXT1
                     <      	//.define C_TimerB_Input1			0x2000
                     <      	//.define C_TimerB_Input1_FRTC	0x0000
                     <      	//.define C_TimerB_Input1_EXT1	0x2000
                     <      	// Bit14 : Timer C input source select; 0 for FRTC, 1 for EXT1
                     <      	//.define C_TimerC_Input1			0x4000
                     <      	//.define C_TimerC_Input1_FRTC	0x0000
                     <      	//.define C_TimerC_Input1_EXT1	0x4000
                     <      	// Bit15 : Reserved
                     <      	
                     <      	//.define SystemClock				20480000
                     <      	//.define SystemClock				24576000
                     <      	//.define SystemClock				32768000
                     <      	//.define SystemClock				40960000
                     <      	.define SystemClock				49152000
                     <      	//.define SystemClock				12000000		// For FPGA Test
                     <      	//.define SystemClock				24000000		// For FPGA Test
                     <      	//.define SystemClock				48000000		// For FPGA Test
                     <      	
                     <      	.define C_Timer_Setting_1K   	65536 - (SystemClock / 1000)
                     <      	.define C_Timer_Setting_2K     	65536 - (SystemClock / 2000)
                     <      	.define C_Timer_Setting_3K     	65536 - (SystemClock / 3000)
                     <      	.define C_Timer_Setting_4K     	65536 - (SystemClock / 4000)
                     <      	.define C_Timer_Setting_5K     	65536 - (SystemClock / 5000)
                     <      	.define C_Timer_Setting_6K     	65536 - (SystemClock / 6000)
                     <      	.define C_Timer_Setting_7K     	65536 - (SystemClock / 7000)
                     <      	.define C_Timer_Setting_8K    	65536 - (SystemClock / 8000)
                     <      	.define C_Timer_Setting_9K     	65536 - (SystemClock / 9000)
                     <      	.define C_Timer_Setting_10K    	65536 - (SystemClock / 10000)
                     <      	.define C_Timer_Setting_11K    	65536 - (SystemClock / 11000)
                     <      	.define C_Timer_Setting_12K    	65536 - (SystemClock / 12000)
                     <      	.define C_Timer_Setting_13K    	65536 - (SystemClock / 13000)
                     <      	.define C_Timer_Setting_14K    	65536 - (SystemClock / 14000)
                     <      	.define C_Timer_Setting_15K    	65536 - (SystemClock / 15000)
                     <      	.define C_Timer_Setting_16K    	65536 - (SystemClock / 16000)
                     <      	.define C_Timer_Setting_20K    	65536 - (SystemClock / 20000)
                     <      	.define C_Timer_Setting_24K    	65536 - (SystemClock / 24000)
                     <      	.define C_Timer_Setting_28K   	65536 - (SystemClock / 28000)
                     <      	.define C_Timer_Setting_32K    	65536 - (SystemClock / 32000)
                     <      	.define C_Timer_Setting_36K   	65536 - (SystemClock / 36000)
                     <      	.define C_Timer_Setting_40K   	65536 - (SystemClock / 40000)
                     <      	.define C_Timer_Setting_48K    	65536 - (SystemClock / 48000)
                     <      	.define C_Timer_Setting_64K    	65536 - (SystemClock / 64000)
                     <      	.define C_Timer_Setting_500K   	65536 - (SystemClock / 500000)
                     <      	.define C_Timer_Setting_15555  	65536 - (SystemClock / 15555)	// For FPGA Test
                     <      	.define C_Timer_Setting_17777  	65536 - (SystemClock / 17777)	// For FPGA Test
                     <      	
                     <      	
                     <      	//====================================================================================
                     <      	// P_PWM_Ctrl (0x2020)  IOPWM
                     <      	//====================================================================================
                     <      	// Bit[15] : IOPWM_CNT_Clear
                     <      	.define	C_IOPWM_CNT_Clear		0x8000
                     <      	// Bit[14:7] : Reserved
                     <      	// Bit[6] : IOPWM_Mask
                     <      	.define	C_IOPWM_Mask			0x0040
                     <      	.define	C_IOPWM_Mask_Disable	0x0000		//default
                     <      	.define	C_IOPWM_Mask_Enable		0x0040
                     <      	// Bit[5:4] : Clock Source for IOPWM
                     <      	.define	C_IOPWM_CLK_SRC			0x0030
                     <      	.define	C_IOPWM_SRC_FRTC_Div2	0x0000
                     <      	.define	C_IOPWM_SRC_TimerA		0x0010
                     <      	.define	C_IOPWM_SRC_TimerB		0x0020
                     <      	.define	C_IOPWM_SRC_TimerC		0x0030
                     <      	// Bit[3:0] : PWM_Duty
                     <      	.define	C_IOPWM_Duty			0x000F
                     <      	.define C_IOPWM_OFF				0x0000
                     <      	.define C_IOPWM_1_Div_16		0x0001
                     <      	.define C_IOPWM_2_Div_16		0x0002
                     <      	.define C_IOPWM_3_Div_16		0x0003
                     <      	.define C_IOPWM_4_Div_16		0x0004
                     <      	.define C_IOPWM_5_Div_16		0x0005
                     <      	.define C_IOPWM_6_Div_16		0x0006
                     <      	.define C_IOPWM_7_Div_16		0x0007
                     <      	.define C_IOPWM_8_Div_16		0x0008
                     <      	.define C_IOPWM_9_Div_16		0x0009
                     <      	.define C_IOPWM_10_Div_16		0x000A
                     <      	.define C_IOPWM_11_Div_16		0x000B
                     <      	.define C_IOPWM_12_Div_16		0x000C
                     <      	.define C_IOPWM_13_Div_16		0x000D
                     <      	.define C_IOPWM_14_Div_16		0x000E
                     <      	.define C_IOPWM_1_Div_2			0x000F
                     <      	
                     <      	//====================================================================================
                     <      	// P_System_Clock (0x2030)  
                     <      	// The System Clock can be configured form 24.576MHz to 49.152MHz
                     <      	//====================================================================================
                     <      	// Bit[7:5] : FOSC
                     <      	.define C_FOSC					0x00E0
                     <      	.define C_FOSC_24576KHz			0x0000
                     <      	.define C_FOSC_20480KHz			0x0020
                     <      	.define C_FOSC_32768KHz			0x0040
                     <      	.define C_FOSC_40960KHz			0x0060
                     <      	.define C_FOSC_49152KHz			0x0080
                     <      	.define C_FOSC_49152KHz_M1		0x00A0
                     <      	.define C_FOSC_49152KHz_M2		0x00C0
                     <      	.define C_FOSC_49152KHz_M3		0x00E0
                     <      	// Bit[4] : 32KHz Sleep Status
                     <      	.define	C_Sleep_RTC_Status		0x0010
                     <      	.define	C_Sleep_RTC_SLP_Off		0x0000
                     <      	.define	C_Sleep_RTC_SLP_Work	0x0010
                     <      	// Bit[3] : Strong Mode
                     <      	.define C_RTC_Mode_Sel			0x0008
                     <      	.define C_RTC_Mode_Weak			0x0000
                     <      	.define C_RTC_Mode_Strong		0x0008
                     <      	// Bit[2:0] : CPU Clock
                     <      	.define	C_CPU_CLK				0x0007
                     <      	.define	C_CPU_CLK_FOSC			0x0000
                     <      	.define	C_CPU_CLK_FOSC_DIV_2	0x0001
                     <      	.define	C_CPU_CLK_FOSC_DIV_4	0x0002
                     <      	.define	C_CPU_CLK_FOSC_DIV_8	0x0003			// Default Value
                     <      	.define	C_CPU_CLK_FOSC_DIV_16	0x0004
                     <      	.define	C_CPU_CLK_FOSC_DIV_32	0x0005
                     <      	.define	C_CPU_CLK_FOSC_DIV_64	0x0006
                     <      	.define	C_CPU_CLK_FOSC_DIV_128	0x0007
                     <      	
                     <      	// P_System_Sleep (0x2036)
                     <      	.define C_System_Sleep			0x5555
                     <      	// P_System_Reset (0x2031)
                     <      	.define C_Software_Reset		0x5555
                     <      	// P_TimeBase_Clear (0x2033)
                     <      	.define	C_TimeBase_Clear		0x5555			// Write any value to clear
                     <      	// P_Watchdog_Clear (0x2034)
                     <      	.define	C_Watchdog_Clear		0x5555
                     <      	
                     <      	//====================================================================================
                     <      	// P_Reset_LVD_Ctrl (0x2032)
                     <      	//====================================================================================
                     <      	// Bit[15]
                     <      	.define C_Watchdog_Reset_Flag	0x8000			// Flag
                     <      	// Bit[14]
                     <      	.define C_Software_Reset_Flag	0x4000			// Flag
                     <      	// Bit[13]
                     <      	.define C_Wathcdog_Reset_Err_Flag	0x2000			// Flag
                     <      	// Bit[12]
                     <      	.define C_ILL_Addr_Reset_Flag	0x1000			// Flag
                     <      	// Bit[11]
                     <      	.define C_LVD_Status_Flag		0x0800			// Flag
                     <      	// Bit[9:2] Reserved
                     <      	// Bit[1:0] : LVD_Ctrl
                     <      	.define	C_LVD_Ctrl				0x0003
                     <      	.define	C_LVD_Ctrl_3D2V			0x0000			// Default Value
                     <      	.define	C_LVD_Ctrl_3D0V			0x0001
                     <      	.define	C_LVD_Ctrl_2D8V			0x0002
                     <      	.define	C_LVD_Ctrl_2D6V			0x0003
                     <      	// LVR always setting 2.2v
                     <      	
                     <      	//====================================================================================
                     <      	// P_Wait_Ctrl (0x2035)
                     <      	//====================================================================================
                     <      	.define	C_Wait_State_Reg		0x000F
                     <      	.define C_Wait_State_2Cycles1	0x0000
                     <      	.define C_Wait_State_2Cycles2	0x0001
                     <      	.define C_Wait_State_2Cycles	0x0002
                     <      	.define C_Wait_State_3Cycles	0x0003			// Default Value
                     <      	.define C_Wait_State_4Cycles	0x0004
                     <      	.define C_Wait_State_5Cycles	0x0005
                     <      	.define C_Wait_State_6Cycles	0x0006
                     <      	.define C_Wait_State_7Cycles	0x0007
                     <      	.define C_Wait_State_8Cycles	0x0008
                     <      	.define C_Wait_State_9Cycles	0x0009
                     <      	.define C_Wait_State_10Cycles	0x000A
                     <      	.define C_Wait_State_11Cycles	0x000B
                     <      	.define C_Wait_State_12Cycles	0x000C
                     <      	.define C_Wait_State_13Cycles	0x000D
                     <      	.define C_Wait_State_14Cycles	0x000E
                     <      	.define C_Wait_State_15Cycles	0x000F
                     <      	
                     <      	//====================================================================================
                     <      	// P_DAC_Ctrl (0x2040)
                     <      	//====================================================================================
                     <      	// Bit[15:3] : Reserved
                     <      	// Bit[2] : DAC Enable
                     <      	.define	C_DAC_Disable			0x0000
                     <      	.define	C_DAC_Enable			0x0004
                     <      	// Bit[1:0] : DAC Timer Select
                     <      	.define C_DAC_TMR_Sel			0x0003
                     <      	.define C_DAC_TMR_Sel_Manual	0x0000
                     <      	.define C_DAC_TMR_Sel_TimerA	0x0001
                     <      	.define C_DAC_TMR_Sel_TimerB	0x0002
                     <      	.define C_DAC_TMR_Sel_TimerC	0x0003
                     <      	
                     <      	//====================================================================================
                     <      	// P_INT_Ctrl (0x2050)
                     <      	// P_INT_Status (0x2051)
                     <      	// P_FIQ_Sel (0x2052)
                     <      	//====================================================================================
                     <      	// Bit[15:13] : Reserve
                     <      	.define C_IRQ0_TMA					0x1000
                     <      	.define C_IRQ1_TMB					0x0800
                     <      	.define C_IRQ2_TMC					0x0400
                     <      	.define C_IRQ3_SPI					0x0200
                     <      	.define C_IRQ4_KEY					0x0100
                     <      	.define C_IRQ5_EXT1					0x0080
                     <      	.define C_IRQ5_EXT2					0x0040
                     <      	.define C_IRQ6_4096Hz				0x0020
                     <      	.define C_IRQ6_2048Hz				0x0010
                     <      	.define C_IRQ6_512Hz				0x0008
                     <      	.define C_IRQ7_64Hz					0x0004
                     <      	.define C_IRQ7_16Hz					0x0002
                     <      	.define C_IRQ7_2Hz					0x0001
                     <      	
                     <      	//====================================================================================
                     <      	// P_SPI_Ctrl (0x2060)
                     <      	//====================================================================================
                     <      	// Bit[2:0] : Master Mode clock selection : 111b is reserved
                     <      	.define C_SPI_SCK_SEL				0x0007
                     <      	.define C_SCKSEL_FPLL_Div_2			0x0000
                     <      	.define C_SCKSEL_FPLL_Div_4			0x0001
                     <      	.define C_SCKSEL_FPLL_Div_8			0x0002
                     <      	.define C_SCKSEL_FPLL_Div_16		0x0003
                     <      	.define C_SCKSEL_FPLL_Div_32		0x0004
                     <      	.define C_SCKSEL_FPLL_Div_64		0x0005	
                     <      	.define C_SCKSEL_FPLL_Div_128		0x0006
                     <      	// Bit3 : Reserved
                     <      	// Bit4 : SPI Clock Polarity
                     <      	.define	C_SPI_Clock_Pol				0x0010
                     <      	.define C_SPI_Clock_Pol_Normal		0x0000	// Clock Normal or Inverted 
                     <      	.define C_SPI_Clock_Pol_Inverse		0x0010
                     <      	// Bit5 : SPI Clock Phase
                     <      	.define C_SPI_Clock_Phase			0x0020
                     <      	.define C_SPI_Clock_Phase_Normal	0x0000	// Rising Edge Trigger or Falling Edge Trigger depend on Polarity
                     <      	.define C_SPI_Clock_Phase_Shift		0x0020  // (POL=0, PHA=1)
                     <      	// Bit[7:6] : Reserved
                     <      	// Bit8 : SPI Mode
                     <      	.define	C_SPI_Mode					0x0100
                     <      	.define C_MasterMode				0x0000
                     <      	.define C_SlaveMode  				0x0100
                     <      	// Bit[10:9] : Reserved
                     <      	// Bit11 : SPI Reset
                     <      	.define C_SPI_Reset					0x0800
                     <      	// Bit12 : Reserved
                     <      	// Bit13 : Loop Back Mode Selection
                     <      	.define	C_SPI_LBM_Normal			0x0000
                     <      	.define	C_SPI_LBM_Enable			0x2000
                     <      	// Bit14: Reserved
                     <      	// Bit15 : SPI Enable
                     <      	.define C_SPI_Disable				0x0000
                     <      	.define C_SPI_Enable				0x8000
                     <      	
                     <      	//====================================================================================
                     <      	// P_SPI_TX_Status (0x2061)
                     <      	//====================================================================================
                     <      	// Bit[3:0] : SPI TX Flag (read only) : Only 8 FIFOs  
                     <      	.define	C_SPI_TX_Flag				0x0007		// 0 ~ 7
                     <      	// Bit[7:4] : SPI TX level setting
                     <      	.define C_SPI_TX_FIFO_Level			0x0070		// 0 ~ 7
                     <      	.define C_SPI_TX_FIFO_Level_0		0x0000
                     <      	.define C_SPI_TX_FIFO_Level_1		0x0010
                     <      	.define C_SPI_TX_FIFO_Level_2		0x0020
                     <      	.define C_SPI_TX_FIFO_Level_3		0x0030
                     <      	.define C_SPI_TX_FIFO_Level_4		0x0040
                     <      	.define C_SPI_TX_FIFO_Level_5		0x0050
                     <      	.define C_SPI_TX_FIFO_Level_6		0x0060
                     <      	.define C_SPI_TX_FIFO_Level_7		0x0070
                     <      	// Bit[13:8] : Reserved
                     <      	// Bit14 : SPI TX interrupt enable
                     <      	.define C_SPI_TX_INT_DIS			0x0000
                     <      	.define C_SPI_TX_INT_EN				0x4000
                     <      	// Bit15 : SPI TX interrupt flag
                     <      	.define C_SPI_TX_INT_Flag			0x8000
                     <      	
                     <      	//====================================================================================
                     <      	// P_SPI_RX_Status (0x2063)
                     <      	//====================================================================================
                     <      	// Bit[3:0] : SPI RX Flag (read only)
                     <      	.define	C_SPI_RX_Flag				0x0007		// 0 ~ 7
                     <      	// Bit[7:4] : SPI RX full level setting
                     <      	.define C_SPI_RX_FIFO_Level			0x0070
                     <      	.define C_SPI_RX_FIFO_Level_1		0x0000
                     <      	.define C_SPI_RX_FIFO_Level_2		0x0010
                     <      	.define C_SPI_RX_FIFO_Level_3		0x0020
                     <      	.define C_SPI_RX_FIFO_Level_4		0x0030
                     <      	.define C_SPI_RX_FIFO_Level_5		0x0040
                     <      	.define C_SPI_RX_FIFO_Level_6		0x0050
                     <      	.define C_SPI_RX_FIFO_Level_7		0x0060
                     <      	.define C_SPI_RX_FIFO_Level_8		0x0070
                     <      	// Bit8 : SPI RX buffer overwrite (read only)
                     <      	.define C_SPI_RX_BUF_OVER_ERROR		0x0100
                     <      	// Bit9 : SPI RX buffer full (read only)
                     <      	.define C_SPI_RX_BUF_Full			0x0200
                     <      	// Bit[13:10] : Reserved
                     <      	// Bit14 : SPI Rx interrupt enable
                     <      	.define C_SPI_RX_INT_DIS			0x0000
                     <      	.define C_SPI_RX_INT_EN				0x4000
                     <      	// Bit15 : SPI RX interrupt flag
                     <      	.define C_SPI_RX_INT_Flag			0x8000
                     <      	
                     <      	//====================================================================================
                     <      	// P_SPI_Misc (0x2065)
                     <      	//====================================================================================
                     <      	// Bit0 : Transmit FIFO Empty Flag
                     <      	.define	C_SPI_TX_Empty_Flag				0x0001
                     <      	// Bit1 : Transmit FIFO Not Full Flag
                     <      	.define	C_SPI_TX_NonFull_Flag			0x0002
                     <      	// Bit2 : Receive FIFO Empty Flag
                     <      	.define	C_SPI_RX_Empty_Flag				0x0004
                     <      	// Bit3 : Receive FIFO Full Flag
                     <      	.define	C_SPI_RX_Full_Flag				0x0008
                     <      	// Bit4 : SPI Controller Busy Flag
                     <      	.define	C_SPI_Busy_Flag					0x0010
                     <      	// Bit[7:5] : Reserved
                     <      	// Bit8 : SPI FIFO Smart Mode Register
                     <      	.define	C_SPI_FIFO_Normal_Mode			0x0000
                     <      	.define	C_SPI_FIFO_Smart_Mode			0x0100
                     <      	// Bit9 : SPI FIFO Over Write Mode
                     <      	.define	C_SPI_FIFO_Full_Write_Skipped	0x0000
                     <      	.define	C_SPI_FIFO_Full_Overwrite		0x0200
                     <      	// Bit[15:10] : Reserved
                     <      	
                     <      	//====================================================================================
                     <      	// P_ADC_Ctrl (0x2070)
                     <      	//====================================================================================
                     <      	// Bit[1:0] : Conversion Cycle Select
                     <      	.define	C_ADC_Conv_Cycle				0x0003
                     <      	.define	C_ADC_Conv_Cyc_8				0x0000	// Default
                     <      	.define	C_ADC_Conv_Cyc_16				0x0001
                     <      	.define	C_ADC_Conv_Cyc_32				0x0002
                     <      	.define	C_ADC_Conv_Cyc_64				0x0003
                     <      	// Bit2 : ADC Enable 
                     <      	.define	C_ADC_Disable					0x0000
                     <      	.define	C_ADC_Enable					0x0004
                     <      	// Bit3 : AGC Enable 
                     <      	.define	C_AGC_Disable					0x0000
                     <      	.define	C_AGC_Enable					0x0008
                     <      	// Bit4 : A/D Input Select in Manual Mode
                     <      	.define C_ADC_Ch0_in_MIC 				0x0000
                     <      	.define C_ADC_Ch0_in_LineinPB0			0x0010
                     <      	// Bit5 : V_MIC Power Supply Enable
                     <      	.define	C_ADC_MIC_Disable				0x0000
                     <      	.define	C_ADC_MIC_Enable				0x0020
                     <      	// Bit6 : ADC Chip Enable for Bias Circuit
                     <      	.define	C_ADC_Bias_Disable				0x0000
                     <      	.define	C_ADC_Bias_Enable				0x0040
                     <      	// Bit[8:7] : ADC clock setting
                     <      	.define C_ADC_CLK_Sel					0x0180
                     <      	.define C_ADC_CLK_FPLL_Div_16			0x0000
                     <      	.define C_ADC_CLK_FPLL_Div_32			0x0080
                     <      	.define C_ADC_CLK_FPLL_Div_64			0x0100
                     <      	.define C_ADC_CLK_FPLL_Div_128			0x0180
                     <      	// Bit[11:9] : ADC manual mode channel setting
                     <      	.define C_ADC_Manual_AN0				0x0000
                     <      	.define C_ADC_Manual_AN1				0x0200
                     <      	.define C_ADC_Manual_AN2				0x0400
                     <      	.define C_ADC_Manual_AN3				0x0600
                     <      	.define C_ADC_Manual_AN4				0x0800
                     <      	.define C_ADC_Manual_AN5				0x0A00
                     <      	.define C_ADC_Manual_AN6				0x0C00
                     <      	.define C_ADC_Manual_AN7				0x0E00
                     <      	// Bit[13:12] : Timer select for auto scan mode
                     <      	.define C_ADC_Manual					0x0000
                     <      	.define C_ADC_Timer_A					0x1000
                     <      	.define C_ADC_Timer_B					0x2000
                     <      	.define C_ADC_Timer_C					0x3000
                     <      	// Bit14 : Auto scan busy (read only)
                     <      	.define C_ADC_Auto_Scan_Busy			0x4000
                     <      	// Bit15 : ADC busy (read only)
                     <      	.define C_ADC_Busy						0x8000
                     <      	
                     <      	//====================================================================================
                     <      	// P_ADC_LineIn_BitCtrl (0x2072)
                     <      	//====================================================================================
                     <      	.define	C_ADC_Linein_Enable				0x00FF
                     <      	.define	C_ADC_AN0_Enable				0x0001
                     <      	.define	C_ADC_AN1_Enable				0x0002
                     <      	.define	C_ADC_AN2_Enable				0x0004
                     <      	.define	C_ADC_AN3_Enable				0x0008
                     <      	.define	C_ADC_AN4_Enable				0x0010
                     <      	.define	C_ADC_AN5_Enable				0x0020
                     <      	.define	C_ADC_AN6_Enable				0x0040
                     <      	.define	C_ADC_AN7_Enable				0x0080
                     <      	
                     <      	//====================================================================================
                     <      	// P_Flash_Ctrl (0x26FF)
                     <      	//====================================================================================
                     <      	.define C_Flash_Enable_Access_CMD		0xAAAA
                     <      	.define C_Flash_PageErase_CMD			0x5511
                     <      	.define C_Flash_Program_CMD				0x5533
                     <      	
                     <      	//====================================================================================
                     <      	// Bits Definition
                     <      	//====================================================================================
                     <      	.define	C_Bit0							0x0001
                     <      	.define	C_Bit1							0x0002
                     <      	.define	C_Bit2							0x0004
                     <      	.define	C_Bit3							0x0008
                     <      	.define	C_Bit4							0x0010
                     <      	.define	C_Bit5							0x0020
                     <      	.define	C_Bit6							0x0040
                     <      	.define	C_Bit7							0x0080
                     <      	.define	C_Bit8							0x0100
                     <      	.define	C_Bit9							0x0200
                     <      	.define	C_Bit10							0x0400
                     <      	.define	C_Bit11							0x0800
                     <      	.define	C_Bit12							0x1000
                     <      	.define	C_Bit13							0x2000
                     <      	.define	C_Bit14							0x4000
                     <      	.define	C_Bit15							0x8000
                     <      	
                     <      	
                     <      	
                     <      	
                     <      	
                     <      	
                     <      	
                     <      	
                            	.include DVR4800.inc
                     <      	//==========================================================================
                     <      	// File Name   : DVR4800.inc
                     <      	// Description : SACM DVR4800 API declaration
                     <      	// Written by  : Ray Cheng
                     <      	// Last modified date:
                     <      	//              2005/12/26
                     <      	//==========================================================================
                     <      	.ifndef __DVR4800_INC__
                     <      	.define __DVR4800_INC__
                     <      	
                     <      	.external F_SACM_DVR4800_Initial
                     <      	.external F_SACM_DVR4800_Rec
                     <      	.external F_SACM_DVR4800_Play
                     <      	.external F_SACM_DVR4800_Stop
                     <      	.external F_SACM_DVR4800_Volume
                     <      	.external F_SACM_DVR4800_Pause
                     <      	.external F_SACM_DVR4800_Resume
                     <      	.external F_SACM_DVR4800_Status
                     <      	.external F_SACM_DVR4800_ServiceLoop
                     <      	.external F_ISR_Service_SACM_DVR4800
                     <      	
                     <      	.endif
                     <      	//========================================================================================        
                     <      	// End of SACM_DVR4800.inc
                     <      	//========================================================================================
                            	
                            	//**************************************************************************
                            	// Contant Defintion Area
                            	//**************************************************************************
                            	.define C_DVR4800_Timer_Setting_X1		C_Timer_Setting_16K
                            	.define C_DVR4800_Timer_Setting_X2		C_Timer_Setting_32K
                            	.define C_DVR4800_Timer_Setting_X4		C_Timer_Setting_64K
                            	
                            	//**************************************************************************
                            	// Variable Publication Area
                            	//**************************************************************************
                            	
                            	
                            	//**************************************************************************
                            	// Function Call Publication Area
                            	//**************************************************************************
                            	.public  _USER_DVR4800_SetStartAddr
                            	.public F_USER_DVR4800_SetStartAddr
                            	.public  _USER_DVR4800_SetStartAddr_Con
                            	.public F_USER_DVR4800_SetStartAddr_Con
                            	
                            	.public F_USER_DVR4800_GetData
                            	.public F_USER_DVR4800_WriteData
                            	.public  _USER_DVR4800_Volume
                            	.public F_USER_DVR4800_Volume
                            	
                            	.public F_SACM_DVR4800_SendDAC1
                            	.public F_SACM_DVR4800_SendDAC2
                            	.public F_SACM_DVR4800_GetADC
                            	.public F_SACM_DVR4800_StartPlay
                            	.public F_SACM_DVR4800_EndPlay
                            	.public F_SACM_DVR4800_StartRecord
                            	.public F_SACM_DVR4800_EndRecord
                            	.public F_SACM_DVR4800_Init_
                            	.public F_SACM_DVR4800_DAC_Timer_X1
                            	.public F_SACM_DVR4800_DAC_Timer_X2
                            	.public F_SACM_DVR4800_ADC_Timer_X1
                            	.public F_SACM_DVR4800_ADC_Timer_X2
                            	.public F_SACM_DVR4800_ADC_Timer_X4
                            	
                            	.public F_SACM_DVR4800_GetStartAddr_Con
                            	
                            	//**************************************************************************
                            	// External Variable Declaration
                            	//**************************************************************************
                            	.external _Mode
                            	
                            	//**************************************************************************
                            	// External Function Declaration
                            	//**************************************************************************
                            	.external F_SPI_ReadAWord
                            	.external F_SPI_ReadNWords
                            	.external F_SPI_SendAWord
                            	.external F_SPI_SendNWords
                            	
                            	//**************************************************************************
                            	// External Table Declaration
                            	//**************************************************************************
                            	.external T_SACM_DVR4800_SpeechTable
                            	
                            	//**************************************************************************
                            	// RAM Definition Area
                            	//**************************************************************************
00000417                    	.RAM
00000417 00 00              	.var R_ExtMem_Low
00000418 00 00              	.var R_ExtMem_High
00000419 00 00              	.var R_ExtMem_Low_Con
0000041A 00 00              	.var R_ExtMem_High_Con
                            	
                            	//*****************************************************************************
                            	// Table Definition Area
                            	//*****************************************************************************
0000807B                    	.TEXT
                            	// Volume Table
                            	T_SACM_DVR4800_Volume_Level:
0000807B 00 00 50 02        	.dw 0x0000, 0x0250, 0x0500, 0x1000
         00 05 00 10
0000807F 00 15 00 20        	.dw	0x1500, 0x2000, 0x2500, 0x3000
         00 25 00 30
00008083 00 35 00 40        	.dw 0x3500, 0x4000, 0x5000, 0x6500
         00 50 00 65
00008087 00 7D 00 9C        	.dw	0x7d00, 0x9c00, 0xc400, 0xf500
         00 C4 00 F5
                            	
                            	//**************************************************************************
                            	// CODE Definition Area
                            	//**************************************************************************
0000A405                    	.CODE
                            	//****************************************************************
                            	// Function    : F_SACM_DVR4800_Init_
                            	// Description : Hardware initilazation for DVR4800, called by library
                            	// Destory     : R1
                            	// Parameter   : None
                            	// Return      : None
                            	// Note        : None
                            	//****************************************************************
                            	F_SACM_DVR4800_Init_:	.proc
0000A405 45 F1              		FIR_MOV OFF;
                            		
0000A406 4F 92              	R1 = C_TimerA_FPLL;				// TimerA CKA=Fosc/2 CKB=1 Tout:off
0000A407 19 D3 16 20        		[P_Timer_Ctrl] = R1;
0000A409 09 93 00 FA        		R1= C_DVR4800_Timer_Setting_X2;	// TimerA setting
0000A40B 19 D3 10 20        		[P_TimerA_Data] = R1;
0000A40D 19 D3 11 20        		[P_TimerA_CNTR] = R1;
                            	
0000A40F 45 92              		R1 = C_DAC_Enable | C_DAC_TMR_Sel_TimerA;
0000A410 19 D3 40 20        		[P_DAC_Ctrl] = R1;		// b2 of P_DAC_Ctrl must be set to 1 in GPCE500A. GPCE060A doesn't use this bit
                            	
0000A412 11 93 50 20        		R1 = [P_INT_Ctrl];
0000A414 09 A3 00 10        		R1 |= C_IRQ0_TMA;
0000A416 19 D3 50 20        		[P_INT_Ctrl] = R1;
                            	
0000A418 11 93 52 20        		R1 = [P_FIQ_Sel];
0000A41A 09 A3 00 10        		R1 |= C_IRQ0_TMA;
0000A41C 19 D3 52 20        		[P_FIQ_Sel] = R1;
                            	
                            	
                            		//r1 = 0x0115;			// 061A: AGC enable; MIC IN; ADC enable
0000A41E 09 93 EC 10        		R1 = C_ADC_Enable | C_AGC_Enable | C_ADC_CLK_FPLL_Div_32 | C_ADC_Bias_Enable | C_ADC_MIC_Enable | C_ADC_Timer_A
0000A420 19 D3 70 20        		[P_ADC_Ctrl] = R1;
                            	
                            		
0000A422 4E F1              		FIQ on;
0000A423 90 9A              		retf;
                            		.endp
                            	
                            	//****************************************************************
                            	// Function    : F_USER_DVR4800_Volume
                            	// Description : Set speech volume
                            	// Destory     : R1
                            	// Parameter   : R1: volume index
                            	// Return      : None
                            	// Note        : None
                            	//****************************************************************
                            	 _USER_DVR4800_Volume: .proc
0000A424 08 03 03 00        		R1 = SP + 3;
0000A426 C1 92              		R1 = [R1];								// volume index
                            	F_USER_DVR4800_Volume:
0000A427 09 03 7B 80        		R1 += T_SACM_DVR4800_Volume_Level;		// loop up volume table
0000A429 C1 92              		R1 = [R1];
0000A42A 40 F0 96 9E        		call F_SACM_DVR4800_Volume;
0000A42C 90 9A              		retf
                            		.endp
                            	
                            	//****************************************************************
                            	// Function    : F_SACM_DVR4800_DAC_Timer_X1
                            	// Description : Change timer setting for change DA filter, called by library
                            	// Destory     : R1
                            	// Parameter   : None
                            	// Return      : None
                            	// Note        : None
                            	//****************************************************************
                            	 _SACM_DVR4800_DAC_Timer_X1:	.proc
                            	F_SACM_DVR4800_DAC_Timer_X1:
0000A42D 09 93 00 F4        		R1 = C_DVR4800_Timer_Setting_X1;
0000A42F 19 D3 10 20        		[P_TimerA_Data] = R1;
0000A431 90 9A              		retf;
                            		.endp
                            	
                            	//****************************************************************
                            	// Function    : F_SACM_DVR4800_DAC_Timer_X2
                            	// Description : Set timer for DVR4800 playback, called by library
                            	// Destory     : R1
                            	// Parameter   : None
                            	// Return      : None
                            	// Note        : None
                            	//****************************************************************
                            	 _SACM_DVR4800_DAC_Timer_X2:	.proc
                            	F_SACM_DVR4800_DAC_Timer_X2:
0000A432 88 D2              		push R1 to [SP];
0000A433 09 93 00 FA        		R1 = C_DVR4800_Timer_Setting_X2;
0000A435 19 D3 10 20        		[P_TimerA_Data] = R1;
0000A437 88 90              		pop R1 from [SP];
0000A438 90 9A              		retf;
                            		.endp
                            	
                            	//****************************************************************
                            	// Function    : F_SACM_DVR4800_ADC_Timer_X1
                            	// Description : Change timer setting for change AD filter, called by library
                            	// Destory     : R1
                            	// Parameter   : None
                            	// Return      : None
                            	// Note        : None
                            	//****************************************************************
                            	 _SACM_DVR4800_ADC_Timer_X1:	.proc
                            	F_SACM_DVR4800_ADC_Timer_X1:
0000A439 09 93 00 F4        		R1 = C_DVR4800_Timer_Setting_X1;
0000A43B 19 D3 10 20        		[P_TimerA_Data] = R1;
0000A43D 90 9A              		retf;
                            		.endp
                            	
                            	//****************************************************************
                            	// Function    : F_SACM_DVR4800_ADC_Timer_X2
                            	// Description : Change timer setting for change AD filter, called by library
                            	// Destory     : R1
                            	// Parameter   : None
                            	// Return      : None
                            	// Note        : None
                            	//****************************************************************
                            	 _SACM_DVR4800_ADC_Timer_X2:	.proc
                            	F_SACM_DVR4800_ADC_Timer_X2:
0000A43E 09 93 00 FA        		R1 = C_DVR4800_Timer_Setting_X2;
0000A440 19 D3 10 20        		[P_TimerA_Data] = R1;
0000A442 90 9A              		retf;
                            		.endp
                            	
                            	//****************************************************************
                            	// Function    : F_SACM_DVR4800_ADC_Timer_X4
                            	// Description : Set timer for DVR4800 recording, called by library
                            	// Destory     : R1
                            	// Parameter   : None
                            	// Return      : None
                            	// Note        : None
                            	//****************************************************************
                            	 _SACM_DVR4800_ADC_Timer_X4:	.proc
                            	F_SACM_DVR4800_ADC_Timer_X4:
0000A443 88 D2              		push R1 to [SP];
0000A444 09 93 00 FD        		R1 = C_DVR4800_Timer_Setting_X4;
0000A446 19 D3 10 20        		[P_TimerA_Data] = R1;
0000A448 88 90              		pop R1 from [SP];
0000A449 90 9A              		retf;
                            		.endp
                            	
                            	//****************************************************************
                            	// Function    : F_SACM_DVR4800_GetADC
                            	// Description : Get ADC data for recording
                            	// Destory     : R1
                            	// Parameter   : None
                            	// Return      : R4 = ADC data
                            	// Note        : None
                            	//****************************************************************
                            	F_SACM_DVR4800_GetADC:	.proc
0000A44A 14 99 71 20        		R4 = [P_ADC_Data];
0000A44C 90 9A              		retf;
                            		.endp
                            	
                            	//****************************************************************
                            	// Function    : F_SACM_DVR4800_SendDAC1
                            	// Description : Send data to DAC1, called by library
                            	// Destory     : None
                            	// Parameter   : R4: 16-bit signed PCM data
                            	// Return      : None
                            	// Note        : None
                            	//****************************************************************
                            	F_SACM_DVR4800_SendDAC1:	.proc
                            	
0000A44D 1C D9 41 20        		[P_DAC_Data] = R4;
0000A44F 90 9A              		retf;
                            		.endp
                            	
                            	//****************************************************************
                            	// Function    : F_SACM_DVR4800_SendDAC2
                            	// Description : Send data to DAC2, called by library
                            	// Destory     : None
                            	// Parameter   : R4: 16-bit signed PCM data
                            	// Return      : None
                            	// Note        : None
                            	//****************************************************************
                            	F_SACM_DVR4800_SendDAC2:	.proc
                            	
0000A450 90 9A              		retf; 
                            		.endp
                            	
                            	//****************************************************************
                            	// Function    : F_SACM_DVR4800_StartPlay
                            	// Description : This function called by library when Play function is callled
                            	// Destory     : None
                            	// Parameter   : None
                            	// Return      : None
                            	// Note        : None
                            	//****************************************************************
                            	F_SACM_DVR4800_StartPlay:	.proc
0000A451 65 F1              		nop;
0000A452 90 9A              		retf;
                            		.endp
                            	
                            	//****************************************************************
                            	// Function    : F_SACM_DVR4800_EndPlay
                            	// Description : This function called by library when speech play end
                            	// Destory     : None
                            	// Parameter   : None
                            	// Return      : None
                            	// Note        : None
                            	//****************************************************************
                            	F_SACM_DVR4800_EndPlay:	.proc
0000A453 65 F1              		nop;
0000A454 90 9A              		retf;
                            		.endp
                            	
                            	//****************************************************************
                            	// Function    : F_SACM_DVR4800_StartRecord
                            	// Description : This function called by library when Record function is callled
                            	// Destory     : None
                            	// Parameter   : None
                            	// Return      : None
                            	// Note        : None
                            	//****************************************************************
                            	F_SACM_DVR4800_StartRecord:	.proc
0000A455 65 F1              		nop;
0000A456 90 9A              		retf;
                            		.endp
                            	
                            	//****************************************************************
                            	// Function    : F_SACM_DVR4800_EndRecord
                            	// Description : Call back from kernel when bit stream encoding is done 
                            	// Destory     : R1, R2, R3
                            	// Parameter   : R1: Low byte of file length
                            	//               R2: High byte of File length
                            	// Return      : None
                            	// Note        : None
                            	//****************************************************************
                            	F_SACM_DVR4800_EndRecord: .proc
0000A457 88 D4              		push R2 to [SP];
0000A458 88 D2              		push R1 to [SP];
0000A459 40 92              		R1 = 0;
0000A45A 40 94              		R2 = 0;
0000A45B 88 94              		pop R3 from [SP];
                            	//	call F_SIO_SendAWord;
0000A45C 40 F0 F3 9F        		call F_SPI_SendAWord;
0000A45E 42 02              		R1 += 2;
0000A45F 88 94              		pop R3 from [SP];
                            	//	call F_SIO_SendAWord;
0000A460 40 F0 F3 9F        		call F_SPI_SendAWord;
0000A462 90 9A              		retf;
                            		.endp
                            	
                            	//****************************************************************
                            	// Function    : F_USER_DVR4800_SetStartAddr
                            	// Description : This API allows users to set the beginning address
                            	//               to fetch data. This address can be either a ROM address
                            	//               or a external storage address. User would have to modify
                            	//               the function body based on the application's need.
                            	// Destory     : None
                            	// Parameter   : R1: Low byte of start address
                            	//               R2: High byte of start address
                            	// Return      : None
                            	// Note        : None
                            	//****************************************************************
                            	_USER_DVR4800_SetStartAddr:	.proc
0000A463 08 05 03 00        		R2 = SP + 3;
0000A465 D2 92              		R1 = [R2++];
0000A466 C2 94              		R2 = [R2];
                            	F_USER_DVR4800_SetStartAddr:
0000A467 98 D6              		push R1, R3 to [SP];
0000A468 13 97 24 04        		R3 = [_Mode];
0000A46A 05 5E              		jz ?L_PlayPrerecordData;
                            	?L_PlayRecordedData:
0000A46B 19 D3 17 04        		[R_ExtMem_Low] = R1;
0000A46D 1A D5 18 04        		[R_ExtMem_High] = R2;
0000A46F 0C EE              		jmp ?L_SetStartAddrEnd;
                            			
                            	?L_PlayPrerecordData:
0000A470 09 03 2E 80        		R1 += T_SACM_DVR4800_SpeechTable;
0000A472 C1 92              		R1 = [R1];
0000A473 D1 94              		R2 = [R1++];
0000A474 1A D5 17 04        		[R_ExtMem_Low] = R2;
0000A476 C1 92              		R1 = [R1];
0000A477 59 93              		R1 = R1 lsl 4;
0000A478 59 93              		R1 = R1 lsl 4;
0000A479 49 93              		R1 = R1 lsl 2;
0000A47A 19 D3 18 04        		[R_ExtMem_High] = R1;
                            				
                            	?L_SetStartAddrEnd:
0000A47C 98 90              		pop R1, R3 from [SP];
0000A47D 90 9A              		retf;
                            		.endp
                            	
                            	//****************************************************************
                            	// Function    : F_USER_DVR4800_SetStartAddr_Con
                            	// Description : This API allows users to set the beginning address
                            	//               to fetch data. This address can be either a ROM address
                            	//               or a external storage address. User would have to modify
                            	//               the function body based on the application's need.
                            	// Destory     : None
                            	// Parameter   : R1: Low byte of start address
                            	//               R2: High byte of start address
                            	// Return      : None
                            	// Note        : None
                            	//****************************************************************
                            	_USER_DVR4800_SetStartAddr_Con:	.proc
0000A47E 08 03 03 00        		R1 = SP + 3;
0000A480 C1 92              		R1 = [R1];
                            	F_USER_DVR4800_SetStartAddr_Con:
0000A481 90 D4              		push R1, R2 to [SP];
0000A482 09 03 2E 80        		R1 += T_SACM_DVR4800_SpeechTable;
0000A484 C1 92              		R1 = [R1];
0000A485 D1 94              		R2 = [R1 ++];
0000A486 1A D5 19 04        		[R_ExtMem_Low_Con] = R2;
0000A488 C1 92              		R1 = [R1];
0000A489 59 93              		R1 = R1 lsl 4;
0000A48A 59 93              		R1 = R1 lsl 4;
0000A48B 49 93              		R1 = R1 lsl 2;
0000A48C 19 D3 1A 04        		[R_ExtMem_High_Con] = R1;
                            	
0000A48E 90 90              		pop R1, R2 from [SP];
0000A48F 90 9A              		retf;
                            		.endp
                            	
                            	//****************************************************************
                            	// Function    : F_SACM_DVR4800_GetStartAddr_Con
                            	// Description : 
                            	// Destory     : None
                            	// Parameter   : 
                            	// Return      : None
                            	// Note        : None
                            	//****************************************************************
                            	F_SACM_DVR4800_GetStartAddr_Con:	.proc
0000A490 11 93 19 04        		R1 = [R_ExtMem_Low_Con];
0000A492 12 95 1A 04        		R2 = [R_ExtMem_High_Con];
0000A494 19 D3 17 04        		[R_ExtMem_Low] = R1;
0000A496 1A D5 18 04        		[R_ExtMem_High] = R2;
0000A498 90 9A              		retf;
                            		.endp
                            	
                            	//****************************************************************
                            	// Function    : F_USER_DVR4800_GetData
                            	// Description : Get speech data from internal or external memory
                            	//               and fill these data to buffer of library.
                            	// Destory     : None
                            	// Parameter   : R1: decode buffer address of library
                            	//               R2: data length
                            	// Return      : None
                            	// Note        : None
                            	//****************************************************************
                            	F_USER_DVR4800_GetData:	.proc
0000A499 A8 DA              		push R1, R5 to [SP];
0000A49A 13 97 24 04        		R3 = [_Mode];
0000A49C 0D 5E              		jz ?L_PlayPrerecordData;
                            	?L_PlayRecordedData:
0000A49D 13 97 17 04        		R3 = [R_ExtMem_Low];
0000A49F 14 99 18 04        		R4 = [R_ExtMem_High];
0000A4A1 40 F0 BA 9F        		call F_SPI_ReadNWords;
0000A4A3 42 07              		R3 += R2 lsl 1;
0000A4A4 40 18              		R4 += 0, carry;
0000A4A5 1B D7 17 04        		[R_ExtMem_Low] = R3;
0000A4A7 1C D9 18 04        		[R_ExtMem_High] = R4;
0000A4A9 15 EE              		jmp ?L_GetDataEnd;
                            	
                            	?L_PlayPrerecordData:
0000A4AA 13 97 17 04        		R3 = [R_ExtMem_Low];
0000A4AC 14 99 18 04        		R4 = [R_ExtMem_High];
                            	?L_Get_Loop:
0000A4AE 40 44              		cmp R2, 0;
0000A4AF 0D 5E              		jz ?L_LoopEnd;
0000A4B0 0E BD FF 03        		SR &= (~0xFC00);
0000A4B2 04 AD              		SR |= R4;
0000A4B3 F3 9A              		R5 = D:[R3++];
0000A4B4 D1 DA              		[R1++] = R5;
0000A4B5 41 24              		R2 -= 1;
0000A4B6 40 46              		cmp R3, 0;
0000A4B7 4A 4E              		jnz ?L_Get_Loop;
0000A4B8 0C 09 00 04        		R4 += 0x0400;
0000A4BA 1C D9 18 04        		[R_ExtMem_High] = R4;
0000A4BC 4F EE              		jmp ?L_Get_Loop;
                            	?L_LoopEnd:
0000A4BD 1B D7 17 04        		[R_ExtMem_Low] = R3; 
                            		
                            	?L_GetDataEnd:	 
0000A4BF A8 90              		pop R1, R5 from [SP];
0000A4C0 90 9A              		retf;
                            		.endp
                            	
                            	.comment @
                            	F_USER_DVR4800_GetData:	.proc
                            		R3 = [R_ExtMem_Low];
                            		R4 = [R_ExtMem_High];
                            		call F_SIO_ReadNWords;
                            		[R_ExtMem_Low] = R3;
                            		[R_ExtMem_High] = R4;
                            		retf;
                            		.endp
                            	@
                            	
                            	//****************************************************************
                            	// Function    : F_USER_DVR4800_WriteData
                            	// Description : Get encoded speech data from buffer of library
                            	//               and write to external memory.
                            	// Destory     : None
                            	// Parameter   : R1: encode buffer address of library
                            	//               R2: data length
                            	// Return      : None
                            	// Note        : None
                            	//****************************************************************
                            	F_USER_DVR4800_WriteData:	.proc
0000A4C1 13 97 17 04        		R3 = [R_ExtMem_Low];
0000A4C3 14 99 18 04        		R4 = [R_ExtMem_High];
0000A4C5 40 F0 2B A0        		call F_SPI_SendNWords;
0000A4C7 42 07              		R3 += R2 lsl 1;
0000A4C8 40 18              		R4 += 0, carry;
0000A4C9 1B D7 17 04        		[R_ExtMem_Low] = R3;
0000A4CB 1C D9 18 04        		[R_ExtMem_High] = R4;
0000A4CD 90 9A              		retf;
                            		.endp
                            		
                            	.comment @
                            	F_USER_DVR4800_WriteData:	.proc
                            		R3 = [R_ExtMem_Low];
                            		R4 = [R_ExtMem_High];
                            		call F_SIO_SendNWords;
                            		[R_ExtMem_Low] = R3;
                            		[R_ExtMem_High] = R4;
                            		retf;
                            		.endp
                            	@
0 error(s), 0 warning(s).

